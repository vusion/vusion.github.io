"undefined"==typeof window||window.ICON_FONT_STYLE?"undefined"!=typeof window&&window.ICON_FONT_STYLE&&window.ICON_FONT_STYLE.update&&window.ICON_FONT_STYLE.update({fontName:"vusion-icon-font",styleContent:'@font-face {\n\tfont-family: "vusion-icon-font";\n\tsrc:url("/public/vusion-icon-font.ttf?3d02953e747bbfe9edc13761bb7ff1de") format("truetype"),\n\turl("/public/vusion-icon-font.eot?3d02953e747bbfe9edc13761bb7ff1de#iefix") format("embedded-opentype"),\n\turl("/public/vusion-icon-font.woff?3d02953e747bbfe9edc13761bb7ff1de") format("woff"),\n\turl("/public/vusion-icon-font.svg?3d02953e747bbfe9edc13761bb7ff1de#vusion-icon-font") format("svg");\n}'}):window.ICON_FONT_STYLE={fontName:"vusion-icon-font",styleContent:'@font-face {\n\tfont-family: "vusion-icon-font";\n\tsrc:url("/public/vusion-icon-font.ttf?3d02953e747bbfe9edc13761bb7ff1de") format("truetype"),\n\turl("/public/vusion-icon-font.eot?3d02953e747bbfe9edc13761bb7ff1de#iefix") format("embedded-opentype"),\n\turl("/public/vusion-icon-font.woff?3d02953e747bbfe9edc13761bb7ff1de") format("woff"),\n\turl("/public/vusion-icon-font.svg?3d02953e747bbfe9edc13761bb7ff1de#vusion-icon-font") format("svg");\n}'},webpackJsonp([44],{416:function(n,e,t){function i(n){return(n||window.ICON_FONT_STYLE).styleContent||""}function s(n){var e=document.createElement("style"),t=document.getElementsByTagName("head")[0];e.innerHTML=i(n),e.id=o,e.type="text/css",t?t.appendChild(e):window.addEventListener("load",function(){t.appendChild(e)})}var o="ICON-FONT-FILE-STYLE";n.exports=function(){window.HAS_CREATE_FONT_STYLE||(s(),window.HAS_CREATE_FONT_STYLE=!0)}},447:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i={render:function(){var n=this.$createElement,e=this._self._c||n;return e("u-article",[e("h1",[this._v("目录结构")]),e("p",[this._v("本节详细展示了不同类型 Vusion 项目的目录结构，以及各种目录和文件的作用。如果觉得不直观，可以查看 "),e("u-link",{attrs:{href:"https://github.com/vusion/vusion-templates"}},[this._v("Vusion 项目模板")]),this._v("。")],1),e("h3",[this._v("普通单页应用（App）")]),e("p",[this._v("配置中对应的"),e("code",{pre:!0},[this._v("type")]),this._v("字段为"),e("code",{pre:!0},[this._v("app")]),this._v("。这种项目为一个简单的单页 App，已配置了 Vue Router。比如您现在阅读的文档页就是这种类型。")]),e("p",[this._v("它的目录结构如下：")]),e("pre",{pre:!0},[e("code",{attrs:{"v-pre":""}},[this._v(".\n├─ src/                             # 源文件\n│   ├─ views/                       # 视图（页面）目录。按路由的层次存放所有页面\n│   │   ├─ index.(html|ejs)         # 页面入口模板\n│   │   ├─ index.js                 # JS 入口\n│   │   ├─ index.vue                # Vue 入口\n│   │   ├─ routes.js                # 路由配置\n│   │   ├─ main.vue                 # 首页部分\n│   │   ├─ page2.vue                # 页面 2\n│   │   ├─ page3/                   #\n│   │   │   ├─ index.vue            # 页面 3\n│   │   │   ├─ routes.js            # 子路由\n│   │   │   ├─ subpage1.vue         # 子页面 3-1\n│   │   │   └─ ...\n│   │   └─ ...\n│   ├─ components/                  # 组件（库）目录。存放所有需要在 Vue 中全局注册的组件\n│   │   ├─ index.js                 # 索引文件\n│   │   ├─ base/                    # 基础配置\n│   │   │   ├─ global.css           # CSS 的全局变量。将会注入到每个 CSS 文件中，请不要添加除变量声明之外的内容，否则会产生大量的 CSS\n│   │   │   ├─ base.css             # 基础 CSS 排版样式。\n│   │   │   └─ ...\n│   │   ├─ common                   # 通用组件\n│   │   │   ├─ u-search-box.vue     # 比如通用的搜索框\n│   │   │   └─ ...\n│   │   ├─ special                  # 特定组件\n│   │   │   ├─ u-purchase-list.vue  # 比如一个购买列表\n│   │   │   └─ ...\n│   │   ├─ cloud-ui                 # 需要重写 Cloud UI 的组件\n│   │   │   ├─ u-select.vue         # 比如需要重写 Select 组件\n│   │   │   ├─ u-select-item.vue\n│   │   │   └─ ...\n│   │   └─ ...                      # 也可以添加其它库\n│   ├─ assets/                      # 资源目录。存放 Webpack 里需要 import 的资源文件\n│   ├─ services/                    # 数据层。可以自行配置，Vusion 目前不作处理\n│   ├─ filters.js                   # 通用过滤器\n│   ├─ directives/                  # 通用指令\n│   ├─ utils/                       # 通用工具库\n│   └─ ...\n├─ static/                          # 静态文件目录。该目录中的内容将会直接被拷贝到输出目录中\n├─ public/                          # 输出目录。所有生成的文件都在这里\n├─ test/                            # 测试目录。大部分组件测试可以写在 Vue 文件中\n│   ├─ unit/                        # 单元测试\n│   │   ├─ page2.spec.js            # 页面 2 的单元测试\n│   │   ├─ page3/                   #\n│   │   │   ├─ index.spec.js        # 页面 3 的单元测试\n│   │   │   ├─ subpage1.spec.js     # 子页面 3-1 的单元测试\n│   │   │   └─ ...\n│   │   └─ ...\n│   └─ e2e/                         # 端对端测试\n│       ├─ page2.spec.js            # 页面 2 的端对端测试\n│       ├─ page3/                   #\n│       │   ├─ index.spec.js        # 页面 3 的端对端测试\n│       │   ├─ subpage1.spec.js     # 子页面 3-1 的端对端测试\n│       │   └─ ...\n│       └─ ...\n├─ .babelrc                         # Babel 配置\n├─ .eslintrc                        # ESLint 配置\n├─ .eslintignore                    # 需要 ESLint 忽略的文件\n├─ .gitignore                       # 需要 git 忽略的文件\n├─ package.json                     # npm 包配置\n├─ vusion.config.js                 # Vusion 配置\n├─ README.md                        # 默认项目文档\n└─ ...\n")])]),e("p",[this._v("部分路径或命名可以根据实际情况在"),e("code",{pre:!0},[this._v("vusion.config.js")]),this._v("中配置。详见"),e("u-link",{attrs:{href:"/api/config"}},[this._v("配置")]),this._v("。")],1),e("h3",[this._v("大型多页应用（App Pro）")]),e("p",[this._v("配置中对应的"),e("code",{pre:!0},[this._v("type")]),this._v("字段为"),e("code",{pre:!0},[this._v("app-pro")]),this._v("。这种项目结构适用于多页面、多模块、企业级的应用场景，比如需要使用后端路由控制权限、业务模块较大较为复杂、甚至可能会拆分成子项目等等。")]),e("p",[this._v("它的目录结构和"),e("code",{pre:!0},[this._v("app")]),this._v("的大部分都很相似，只有"),e("code",{pre:!0},[this._v("src/views")]),this._v("不同，因此下面只罗列这一部分：")]),e("pre",{pre:!0},[e("code",{attrs:{"v-pre":""}},[this._v(".\n├─ src/                             # 源文件\n│   ├─ views/                       # 视图（页面）目录。按路由的层次存放所有页面\n│   │   ├─ login/                   # 登录页\n│   │   │   ├─ index.(html|ejs)     # 页面入口模板\n│   │   │   ├─ index.js             # JS 入口\n│   │   │   └─ index.vue            # Vue 入口\n│   │   ├─ index/                   # 首页\n│   │   │   ├─ index.(html|ejs)     # 页面入口模板\n│   │   │   ├─ index.js             # JS 入口\n│   │   │   ├─ index.vue            # Vue 入口\n│   │   │   ├─ routes.js            # 路由配置\n│   │   │   ├─ main.vue             # 首页部分\n│   │   │   ├─ page2.vue            # 页面 2\n│   │   │   ├─ page3.vue            # 页面 3\n│   │   │   └─ ...\n│   │   ├─ dashboard/               # 复杂页面\n│   │   │   ├─ index.(html|ejs)     # 页面入口模板\n│   │   │   ├─ index.js             # JS 入口\n│   │   │   ├─ index.vue            # Vue 入口\n│   │   │   ├─ routes.js            # 路由配置\n│   │   │   ├─ overview.vue         # 总览模块\n│   │   │   ├─ module2/             #\n│   │   │   │   ├─ index.vue        # 模块 2\n│   │   │   │   ├─ routes.js        # 子路由\n│   │   │   │   ├─ sub1.vue         # 子模块 3-1\n│   │   │   │   └─ ...\n│   │   │   ├─ module3/             #\n│   │   │   │   ├─ components/      # 模块级组件\n│   │   │   │   │   ├─ s-detail.vue # 详情组件\n│   │   │   │   │   └─ ...\n│   │   │   │   ├─ filters.js       # 模块级过滤器\n│   │   │   │   ├─ directives/      # 模块级指令\n│   │   │   │   ├─ utils/           # 模块级工具库\n│   │   │   │   ├─ index.vue        # 模块 3\n│   │   │   │   ├─ routes.js        # 子路由\n│   │   │   │   ├─ sub1.vue         # 子模块 3-1\n│   │   │   │   └─ ...\n│   │   └─ ...\n│   └─ ...\n└─ ...\n")])]),e("p",[this._v("为了适配大型场景，公有和私有分离，方便代码管理，不得不搞这么复杂。")]),e("h3",[this._v("组件库（UI Library）")]),e("p",[this._v("配置中对应的"),e("code",{pre:!0},[this._v("type")]),this._v("字段为"),e("code",{pre:!0},[this._v("library")]),this._v("。这种项目为一个 Vusion 组件库。比如 Proto UI、Cloud UI 就是这种类型。")]),e("p",[this._v("它的目录结构可以看成是"),e("code",{pre:!0},[this._v("app")]),this._v("类型中"),e("code",{pre:!0},[this._v("src/components")]),this._v("的简单形式：")]),e("pre",{pre:!0},[e("code",{attrs:{"v-pre":""}},[this._v(".\n├─ src/                             # 源文件\n│   ├─ index.js                     # 索引文件\n│   ├─ assets/                      # 资源目录。存放 Webpack 里需要 import 的资源文件\n│   ├─ base/                        # 基础配置\n│   │   ├─ global.css               # CSS 的全局变量。将会注入到每个 CSS 文件中，请不要添加除变量声明之外的内容，否则会产生大量的 CSS\n│   │   ├─ base.css                 # 基础 CSS 排版样式。\n│   │   ├─ ...\n│   ├─ u-select.vue                 # Select 组件\n│   ├─ u-select-item.vue\n│   ├─ u-pagination.vue             # Pagination 组件\n│   └─ ...                          # 其它组件\n├─ public/                          # 输出目录。所有生成的文件都在这里\n├─ test/                            # 测试目录。大部分组件测试可以写在 Vue 文件中\n│   └─ ...\n├─ .babelrc                         # Babel 配置\n├─ .eslintrc                        # ESLint 配置\n├─ .eslintignore                    # 需要 ESLint 忽略的文件\n├─ .gitignore                       # 需要 git 忽略的文件\n├─ package.json                     # npm 包配置。简单的 Vusion 配置也可以写在这里\n├─ README.md                        # 默认项目文档\n└─ ...\n")])]),e("h3",[this._v("下一步")]),e("p",[this._v("是不是仍然眼花缭乱的？接下来的几节会将整套技术拆分开来讲述。下一节"),e("u-link",{attrs:{href:"/guides/views"}},[this._v("页面与路由")]),this._v("。")],1)])},staticRenderFns:[]},s=t(1)(null,i,!1,null,null,null);e.default=s.exports}});